[[plugins]]
repo = 'Shougo/deoplete.nvim'
hook_source = '''
let g:deoplete#enable_at_startup = 1
inoremap <expr><tab> pumvisible() ? "\<C-n>" :
      \ neosnippet#expandable_or_jumpable() ?
      \    "\<Plug>(neosnippet_expand_or_jump)" : "\<tab>"
'''
on_i = 1

[[plugins]]
repo = 'Shougo/neosnippet'
hook_source = '''
imap <C-k> <Plug>(neosnippet_expand_or_jump)
smap <C-k> <Plug>(neosnippet_expand_or_jump)
xmap <C-k> <Plug>(neosnippet_expand_target)
if has('conceal')
  set conceallevel=2 concealcursor=niv
endif
'''
hook_add = '''
let g:neosnippet#snippets_directory = $XDG_CONFIG_HOME . '/nvim/snippets'
'''
on_i  = 1

[[plugins]]
repo = 'tpope/vim-fugitive'

[[plugins]]
repo = 'plasticboy/vim-markdown'
on_ft = ['markdown']

[[plugins]]
repo = 'kannokanno/previm'
on_ft = ['markdown']

[[plugins]]
repo = 'derekwyatt/vim-scala'
on_ft = ['scala']

[[plugins]]
repo = 'dag/vim2hs'
on_ft = ['haskell']

[[plugins]]
repo = 'eagletmt/ghcmod-vim'
on_ft = ['haskell']

[[plugins]]
repo = 'ujihisa/neco-ghc'
on_ft = ['haskell']

[[plugins]]
repo = 'ujihisa/ref-hoogle'
on_ft = ['haskell']

[[plugins]]
repo = 'ujihisa/unite-haskellimport'
on_ft = ['haskell']

[[plugins]]
repo = 'vim-ruby/vim-ruby'
on_ft = ['ruby']

[[plugins]]
repo = 'Shougo/vimproc.vim'
build = 'make'

[[plugins]]
repo = 'thinca/vim-quickrun'
hook_add = '''
let g:quickrun_config = {
  \ 'runner' : 'vimproc',
  \ 'runner/vimproc/updatetime' : 10,
  \ 'outputter' : 'error',
  \ 'outputter/error/success' : 'buffer',
  \ 'outputter/error/error'   : 'quickfix',
  \ 'outputter/buffer/close_on_empty' : 1,
  \ 'exec' : ['%c %o %s %a'],
  \ }
'''
depends = ['open-browser.vim', 'vimproc.vim']
hook_source = '''
let g:quickrun_config.cpp = {
  \ 'command' : 'make',
  \ 'args' : './bin/main',
  \ 'exec' : ['%c', '%a'],
  \}
let g:quickrun_config.markdown = {
  \ 'command' : 'pandoc',
  \ 'cmdopt' : '-t html5 -f markdown -c ~/github.css --template=mytemplate --toc --mathjax',
  \ 'outputter' : 'browser',
  \ 'exec' : ['%c %o %s'],
  \}
let g:quickrun_config.dict = {
  \ 'command' : 'words',
  \ 'cmdopt' : 'html',
  \ 'outputter' : 'browser',
  \ 'exec' : ['%c %o %s'],
  \}
let g:quickrun_config.tex = {
  \ 'command' : 'latexmk',
  \ 'cmdopt' : '-r ~/.latexmkrc',
  \ 'args' : 'root.tex',
  \ 'outputter' : 'null',
  \ 'exec' : [
  \            '%c -c',
  \            '%c %o %a',
  \            'find . -name "*.log" -exec mv {} {}.tmp \;',
  \            '%c -c',
  \            'find . -name "*.log.tmp" -exec bash -c "mv {} \\\$(basename {} .tmp)" \;'
  \          ],
  \}
let g:quickrun_config.tex_one = {
  \ 'command' : g:quickrun_config.tex.command,
  \ 'cmdopt' : g:quickrun_config.tex.cmdopt . ' -outdir=.tmp',
  \ 'outputter' : g:quickrun_config.tex.outputter,
  \ 'args' : '.tmp.tex',
  \ 'exec' : [
  \            'cp %s %a',
  \            '%c %o %a',
  \          ],
  \}
let g:quickrun_config.tex_remove = {
  \ 'command' : 'rm',
  \ 'cmdopt' : '-rf',
  \ 'args' : '.tmp .tmp.tex',
  \ 'outputter' : 'null',
  \ 'exec' : ['%c %o %a'],
  \}
let g:quickrun_config.haskell = {
  \ 'command' : 'stack',
  \ 'cmdopt' : 'runhaskell',
  \ 'exec' : ['%c %o %s %a'],
  \}
let g:quickrun_config.python = {
  \ 'command' : 'python',
  \ 'exec' : ['%c %o %s %a'],
  \}
let g:quickrun_config.ruby = {
  \ 'command' : 'ruby',
  \ 'exec' : ['%c %o %s %a'],
  \}
let g:quickrun_config.html = {
  \ 'command' : 'open',
  \ 'outputter' : 'null',
  \ 'exec' : ['%c %o %s %a'],
  \}
let g:quickrun_config.rust = {
  \ 'command' : 'cargo',
  \ 'cmdopt' : 'run',
  \ 'exec' : ['%c %o %s %a'],
  \}
let g:quickrun_config.ctags = {
  \ 'command' : 'ctags',
  \ 'cmdopt' : '-R -f',
  \ 'args' : 'tags',
  \ 'outputter' : 'null',
  \ 'exec' : ["eval 'test ! -f %a || rm %a'", '%c %o %a .'],
  \}
'''

[[plugins]]
repo = 'mattn/webapi-vim'

[[plugins]]
repo = 'mattn/vim-oauth'

[[plugins]]
repo = 'powerman/vim-plugin-AnsiEsc'

[[plugins]]
repo = 'scrooloose/nerdtree'
hook_add = '''
nnoremap <silent><C-e> :NERDTreeToggle<CR>
'''

[[plugins]]
repo = 'majutsushi/tagbar'
hook_add = '''
let g:tagbar_type_markdown = {
  \ 'ctagstype' : 'markdown',
  \ 'kinds' : [
    \ 'x:top:0:0',
    \ 'y:second:0:0',
    \ 'z:third:0:0',
    \ 'd:definition:0:0',
    \ 'p:proposition:0:0',
    \ 't:theorem:0:0',
    \ 'l:lemma:0:0',
    \ 'r:remark:0:0',
    \ 'c:corollary:0:0',
    \ 'e:example:0:0',
    \],
  \ 'sort' : 0,
  \ 'sro' : ':',
  \ 'kind2scope' : {
    \ 'x' : 'top',
    \ 'y' : 'second',
    \ 'z' : 'third',
    \},
  \ 'scope2kind' : {
    \ 'top' : 'x',
    \ 'second' : 'y',
    \ 'third' : 'z',
    \},
  \ 'ctagsbin' : '/Users/nakatam/markdowns/a.out',
  \ 'ctagsargs' : '',
  \}
nnoremap <silent>tb :TagbarToggle<CR>
'''

[[plugins]]
repo = 'tyru/open-browser.vim'
hook_add = '''
let g:netrw_nogx = 1
nmap gx <Plug>(openbrowser-smart-search)
vmap gx <Plug>(openbrowser-smart-search)
'''

[[plugins]]
repo = 'Shougo/unite.vim'

[[plugins]]
repo = 'h1mesuke/unite-outline'
on_source = ['denite.vim']
depends = ['unite.vim']

[[plugins]]
repo = 'tpope/vim-endwise'
on_i = 1

[[plugins]]
repo = 'lervag/vimtex'
on_ft = ['tex', 'plaintex']

[[plugins]]
repo = 'rust-lang/rust.vim'
hook_add = '''
let g:rustfmt_autosave = 1
let g:rustfmt_command = $HOME . '/.cargo/bin/rustfmt'
'''
on_ft = ['rust']

[[plugins]]
repo = 'racer-rust/vim-racer'
hook_add = '''
let g:racer_cmd = $HOME . '/.cargo/bin/racer'
'''
on_ft = ['rust']

[[plugins]]
repo = 'scrooloose/syntastic.git'
hook_add = '''
let g:syntastic_mode_map = { 'mode': 'passive', 'active_filetypes': ['rust', 'ocaml'] }
let g:syntastic_rust_checkers = ['cargo build']
let g:syntastic_cpp_checkers = ['g++ -std=c++11']
let g:syntastic_ocaml_checkers = ['merlin']
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*
'''
on_ft = ['rust', 'ruby', 'cpp', 'ocaml']

[[plugins]]
repo = 'let-def/ocp-indent-vim'
on_ft = ['ocaml']

[[plugins]]
repo = 'yms9654/HTML-AutoCloseTag'
on_ft = ['html']

[[plugins]]
repo = 'kchmck/vim-coffee-script'
on_ft = ['coffee']

[[plugins]]
repo = 'Naughie/vim-latex-live-preview'
hook_add = '''
let g:livepreview_previewer = 'open -a Skim'
let g:livepreview_engine = 'xelatex -no-pdf'
let g:livepreview_bibtex = 'upbibtex'
let g:livepreview_dvipdf = 'xdvipdfmx'
'''
on_ft = ['tex', 'plaintex']
