[[plugins]]
repo = 'Shougo/deoplete.nvim'
hook_source = '''
let g:deoplete#enable_at_startup = 1
call deoplete#custom#option({
      \ 'auto_complete_delay': 0,
      \ 'auto_complete_start_length': 1,
      \ })
'''
on_i = 1

[[plugins]]
repo = 'Shougo/neosnippet'
hook_source = '''
imap <C-k> <Plug>(neosnippet_expand_or_jump)
smap <C-k> <Plug>(neosnippet_expand_or_jump)
xmap <C-k> <Plug>(neosnippet_expand_target)
" imap <expr><TAB> pumvisible() ? "\<C-n>" :
"       \ neosnippet#expandable_or_jumpable() ?
"       \    "\<Plug>(neosnippet_expand_or_jump)" : "\<TAB>"
if has('conceal')
  set conceallevel=2 concealcursor=niv
endif
'''
hook_add = '''
let g:neosnippet#snippets_directory = $XDG_CONFIG_HOME . '/nvim/snippets'
'''
on_i  = 1

[[plugins]]
repo = 'tpope/vim-fugitive'

[[plugins]]
repo = 'plasticboy/vim-markdown'
on_ft = ['markdown']

[[plugins]]
repo = 'kannokanno/previm'
on_ft = ['markdown']

[[plugins]]
repo = 'derekwyatt/vim-scala'
on_ft = ['scala']

[[plugins]]
repo = 'dag/vim2hs'
on_ft = ['haskell']

[[plugins]]
repo = 'eagletmt/ghcmod-vim'
on_ft = ['haskell']

[[plugins]]
repo = 'ujihisa/neco-ghc'
on_ft = ['haskell']

[[plugins]]
repo = 'ujihisa/ref-hoogle'
on_ft = ['haskell']

[[plugins]]
repo = 'ujihisa/unite-haskellimport'
on_ft = ['haskell']

[[plugins]]
repo = 'vim-ruby/vim-ruby'
on_ft = ['ruby']

[[plugins]]
repo = 'thinca/vim-quickrun'
hook_add = '''
let g:quickrun_config = {
  \ 'runner' : 'vimproc',
  \ 'runner/vimproc/updatetime' : 10,
  \ 'outputter' : 'error',
  \ 'outputter/error/success' : 'buffer',
  \ 'outputter/error/error'   : 'quickfix',
  \ 'outputter/buffer/close_on_empty' : 1,
  \ 'exec' : ['%c %o %s %a'],
  \ }
'''
depends = ['open-browser.vim', 'vimproc.vim']
hook_source = '''
let g:quickrun_config.cpp = {
  \ 'command' : 'make',
  \ 'args' : './bin/main',
  \ 'exec' : ['%c', '%a'],
  \}
let g:quickrun_config.markdown = {
  \ 'command' : 'make',
  \ 'cmdopt' : 's=',
  \ 'outputter' : 'null',
  \ 'exec' : ['%c %o%s:.'],
  \}
let g:quickrun_config['markdown.readme'] = {
  \ 'command' : 'pandoc',
  \ 'cmdopt' : '-f markdown -t html5 --template=naughie',
  \ 'outputter' : 'browser',
  \}
let g:quickrun_config.dict = {
  \ 'command' : 'words',
  \ 'cmdopt' : 'html',
  \ 'outputter' : 'browser',
  \ 'exec' : ['%c %o %s'],
  \}
let g:quickrun_config.tex = {
  \ 'command' : 'latexmk',
  \ 'cmdopt' : '-r ~/.latexmkrc',
  \ 'args' : 'root.tex',
  \ 'outputter' : 'null',
  \ 'exec' : [
  \            '%c -c',
  \            '%c %o %a',
  \            'find . -name "*.log" -exec mv {} {}.tmp \;',
  \            '%c -c',
  \            'find . -name "*.log.tmp" -exec bash -c "mv {} \\\$(basename {} .tmp)" \;'
  \          ],
  \}
let g:quickrun_config.haskell = {
  \ 'command' : 'stack',
  \ 'cmdopt' : 'runhaskell',
  \ 'exec' : ['%c %o %s %a'],
  \}
let g:quickrun_config.python = {
  \ 'command' : 'python',
  \ 'exec' : ['%c %o %s %a'],
  \}
let g:quickrun_config.ruby = {
  \ 'command' : 'ruby',
  \ 'exec' : ['%c %o %s %a'],
  \}
let g:quickrun_config.html = {
  \ 'command' : 'open',
  \ 'outputter' : 'null',
  \ 'exec' : ['%c %o %s %a'],
  \}
let g:quickrun_config.ctags = {
  \ 'command' : 'ctags',
  \ 'cmdopt' : '-R -f',
  \ 'args' : 'tags',
  \ 'outputter' : 'null',
  \ 'exec' : ["eval 'test ! -f %a || rm %a'", '%c %o %a .'],
  \}
'''

[[plugins]]
repo = 'powerman/vim-plugin-AnsiEsc'

[[plugins]]
repo = 'scrooloose/nerdtree'
hook_add = '''
nnoremap <silent><C-e> :NERDTreeToggle<CR>
augroup NerdTreeOnEntering
  autocmd!
  autocmd vimenter *.tex NERDTree | wincmd p
  autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif
augroup END
'''



[[plugins]]
repo = 'Shougo/vimfiler.vim'
hook_add = '''
let g:vimfiler_as_default_explorer = 1
"nnoremap <silent><C-e> :VimFiler<CR>
'''
depends = ['unite.vim']

[[plugins]]
repo = 'majutsushi/tagbar'
hook_add = '''
nnoremap <silent>tb :TagbarToggle<CR>
'''

[[plugins]]
repo = 'tyru/open-browser.vim'
hook_add = '''
let g:netrw_nogx = 1
nmap gx <Plug>(openbrowser-smart-search)
vmap gx <Plug>(openbrowser-smart-search)
'''

[[plugins]]
repo = 'tpope/vim-endwise'
on_i = 1

[[plugins]]
repo = 'lervag/vimtex'
hook_add = '''
let g:vimtex_fold_enabled = 1
let g:vimtex_fold_manual = 1
let g:vimtex_fold_levelmarker = '#'
set fillchars=fold:\ 
let g:vimtex_fold_types_defaults = {
  \ 'preamble' : {},
  \ 'comments' : {'enabled' : 0},
  \ 'envs' : {'enabled' : 0},
  \ 'env_options' : {'enabled' : 0},
  \ 'markers' : {'enabled' : 0},
  \ 'sections' : {
  \   'parse_levels' : 0,
  \   'sections' : [
  \     'part',
  \     'chapter',
  \     'section',
  \     'subsection',
  \     'subsubsection',
  \   ],
  \   'parts' : [
  \     'appendix',
  \     'frontmatter',
  \     'mainmatter',
  \     'backmatter',
  \   ],
  \ },
  \ 'cmd_single' : {'enabled' : 0},
  \ 'cmd_single_opt' : {'enabled' : 0},
  \ 'cmd_multi' : {'enabled' : 0},
  \ 'cmd_addplot' : {'enabled' : 0},
  \ }
'''
on_ft = ['tex', 'plaintex']

[[plugins]]
repo = 'rust-lang/rust.vim'
hook_add = '''
let g:rustfmt_autosave = 1
let g:rustfmt_command = $CARGO_HOME . '/bin/rustfmt'
'''
on_ft = ['rust']

[[plugins]]
repo = 'racer-rust/vim-racer'
hook_add = '''
let g:racer_cmd = $CARGO_HOME . '/bin/racer'
'''
on_ft = ['rust']

[[plugins]]
repo = 'let-def/ocp-indent-vim'
on_ft = ['ocaml']

[[plugins]]
repo = 'yms9654/HTML-AutoCloseTag'
on_ft = ['html']

[[plugins]]
repo = 'kchmck/vim-coffee-script'
on_ft = ['coffee']

[[plugins]]
repo = 'leafgarland/typescript-vim'
on_ft = ['typescript']

[[plugins]]
repo = 'Shougo/deoplete-clangx'
on_ft = ['c', 'cpp']

[[plugins]]
repo = 'maksimr/vim-jsbeautify'
hook_add = '''
augroup JsBeautifyAutoload
  autocmd!
  autocmd FileType javascript nnoremap <buffer> ,f :call JsBeautify()<CR>
  autocmd FileType json nnoremap <buffer> ,f :call JsonBeautify()<CR>
augroup END
'''
on_ft = ['javascript', 'json']

[[plugins]]
repo = 'kovisoft/slimv'
on_ft = ['lisp']

[[plugins]]
repo = 'SirVer/ultisnips'
hook_add = '''
let g:UltiSnipsExpandTrigger = "<TAB>"
let g:UltiSnipsJumpForwardTrigger = "<TAB>"
let g:UltiSnipsJumpBackwardTrigger = "<S-TAB>"
'''
on_ft = ['tex']

[[plugins]]
repo = 'neoclide/coc.nvim'
merged = 0
hook_source = '''
inoremap <silent><expr> <c-space> coc#refresh()
inoremap <silent><expr><CR> pumvisible() ? coc#_select_confirm() : <C-g>u<CR><c-r>=coc#on_enter()<CR>
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)
'''
